diff --git a/argumentation_analysis/agents/core/abc/agent_bases.py b/argumentation_analysis/agents/core/abc/agent_bases.py
index 7574edfc..0994f22e 100644
--- a/argumentation_analysis/agents/core/abc/agent_bases.py
+++ b/argumentation_analysis/agents/core/abc/agent_bases.py
@@ -7,11 +7,17 @@ une logique formelle. Ces classes utilisent le pattern Abstract Base Class (ABC)
 pour définir une interface commune que les agents concrets doivent implémenter.
 """
 from abc import ABC, abstractmethod
-from typing import Dict, Any, Optional, Tuple, List, TYPE_CHECKING
+from typing import Dict, Any, Optional, Tuple, List, TYPE_CHECKING, Coroutine
 import logging
 
 from semantic_kernel import Kernel
 from semantic_kernel.agents import Agent
+from semantic_kernel.contents import ChatHistory
+from semantic_kernel.agents.channels.chat_history_channel import ChatHistoryChannel
+from semantic_kernel.agents.chat_completion.chat_completion_agent import ChatHistoryAgentThread
+
+# Résoudre la dépendance circulaire de Pydantic
+ChatHistoryChannel.model_rebuild()
 
 # Import paresseux pour éviter le cycle d'import - uniquement pour le typage
 if TYPE_CHECKING:
@@ -118,25 +124,59 @@ class BaseAgent(Agent, ABC):
             "llm_service_id": self._llm_service_id,
             "capabilities": self.get_agent_capabilities()
         }
-    
+
+    def get_channel_keys(self) -> List[str]:
+        """
+        Retourne les clés uniques pour identifier le canal de communication de l'agent.
+        Cette méthode est requise par AgentGroupChat.
+        """
+        # Utiliser self.id car il est déjà garanti comme étant unique
+        # (initialisé avec agent_name).
+        return [self.id]
+
+    async def create_channel(self) -> ChatHistoryChannel:
+        """
+        Crée un canal de communication pour l'agent.
+
+        Cette méthode est requise par AgentGroupChat pour permettre à l'agent
+        de participer à une conversation. Nous utilisons ChatHistoryChannel,
+        qui est une implémentation générique basée sur ChatHistory.
+        """
+        thread = ChatHistoryAgentThread()
+        return ChatHistoryChannel(thread=thread)
+
     @abstractmethod
     async def get_response(self, *args, **kwargs):
         """Méthode abstraite pour obtenir une réponse de l'agent."""
         pass
 
     @abstractmethod
-    async def invoke(self, *args, **kwargs):
-        """Méthode abstraite pour invoquer l'agent."""
+    async def invoke_single(self, *args, **kwargs):
+        """
+        Méthode abstraite pour l'invocation de l'agent qui retourne une réponse unique.
+        Les agents concrets DOIVENT implémenter cette logique.
+        """
         pass
 
-    async def invoke_stream(self, *args, **kwargs):
-        """Méthode par défaut pour le streaming - peut être surchargée."""
-        result = await self.invoke(*args, **kwargs)
+    async def invoke(self, *args, **kwargs):
+        """
+        Méthode d'invocation principale compatible avec le streaming attendu par le framework SK.
+        Elle transforme la réponse unique de `invoke_single` en un flux.
+        """
+        result = await self.invoke_single(*args, **kwargs)
         yield result
+
+    async def invoke_stream(self, *args, **kwargs):
+        """
+        Implémentation de l'interface de streaming de SK.
+        Cette méthode délègue à `invoke`, qui retourne maintenant un générateur asynchrone.
+        """
+        async for Elt in self.invoke(*args, **kwargs):
+            yield Elt
  
      # Optionnel, à considérer pour une interface d'appel atomique standardisée
      # def invoke_atomic(self, method_name: str, **kwargs) -> Any:
-    #     if hasattr(self, method_name) and callable(getattr(self, method_name)):
+     #     if hasattr(self, method_name) and callable(getattr(self, method_name)):
     #         method_to_call = getattr(self, method_name)
     #         # Potentiellement vérifier si la méthode est "publique" ou listée dans capabilities
     #         return method_to_call(**kwargs)
diff --git a/argumentation_analysis/agents/core/extract/extract_agent.py b/argumentation_analysis/agents/core/extract/extract_agent.py
index 1b9d50ed..c33d0307 100644
--- a/argumentation_analysis/agents/core/extract/extract_agent.py
+++ b/argumentation_analysis/agents/core/extract/extract_agent.py
@@ -673,22 +673,7 @@ class ExtractAgent(BaseAgent):
         self.logger.info(f"Nouvel extrait '{extract_name}' ajouté à '{source_info.get('source_name', '')}' à l'index {new_extract_idx}.")
         return True, new_extract_idx
 
-    async def get_response(self, message: str, **kwargs) -> str:
-        """
-        Méthode implémentée pour satisfaire l'interface BaseAgent.
-        
-        Retourne une réponse basée sur les capacités d'extraction de l'agent.
-        
-        :param message: Le message/texte à traiter
-        :param kwargs: Arguments supplémentaires
-        :return: Réponse de l'agent
-        """
-        # Pour un agent d'extraction, on peut retourner une description des capacités
-        # ou traiter le message selon le contexte
-        capabilities = self.get_agent_capabilities()
-        return f"ExtractAgent '{self.name}' prêt. Capacités: {', '.join(capabilities.keys())}"
-
-    async def invoke(self, action: str = "extract_from_name", **kwargs) -> Any:
+    async def invoke_single(self, action: str = "extract_from_name", **kwargs) -> Any:
         """
         Méthode d'invocation principale pour l'agent d'extraction.
         
diff --git a/argumentation_analysis/agents/core/informal/informal_agent.py b/argumentation_analysis/agents/core/informal/informal_agent.py
index 9c6887c9..50dac07c 100644
--- a/argumentation_analysis/agents/core/informal/informal_agent.py
+++ b/argumentation_analysis/agents/core/informal/informal_agent.py
@@ -732,53 +732,28 @@ class InformalAnalysisAgent(BaseAgent):
                 "analysis_timestamp": self._get_timestamp()
             }
 
-    async def invoke(
-        self,
-        messages: List[ChatMessageContent],
-        **kwargs: Dict[str, Any],
-    ) -> List[ChatMessageContent]:
+    async def invoke_single(self, *args, **kwargs) -> str:
         """
-        Méthode principale pour interagir avec l'agent.
-        Prend le dernier message, effectue une analyse complète et retourne le résultat.
+        Implémentation de la logique de l'agent pour une seule réponse, conforme à BaseAgent.
         """
-        if not messages:
-            return []
-        
-        last_message = messages[-1]
-        text_to_analyze = last_message.content
-        
-        self.logger.info(f"Invocation de l'agent {self.name} avec le message : '{text_to_analyze[:100]}...'")
+        self.logger.info(f"Informal Agent invoke_single called with: args={args}, kwargs={kwargs}")
         
-        analysis_result = await self.perform_complete_analysis(text_to_analyze)
+        raw_text = ""
+        # Extraire le texte des arguments, similaire au ProjectManagerAgent
+        if args and isinstance(args[0], list) and len(args[0]) > 0:
+            for msg in args[0]:
+                if msg.role.value.lower() == 'user':
+                    raw_text = msg.content
+                    break
         
-        # Formatter le résultat en ChatMessageContent
-        response_content = json.dumps(analysis_result, indent=2, ensure_ascii=False)
-        
-        return [ChatMessageContent(role="assistant", content=response_content, name=self.name)]
+        if not raw_text:
+            self.logger.warning("Aucun texte trouvé dans les arguments pour l'analyse informelle.")
+            return json.dumps({"error": "No text to analyze."})
 
-    async def invoke_stream(
-        self,
-        messages: List[ChatMessageContent],
-        **kwargs: Dict[str, Any],
-    ) -> AsyncGenerator[List[ChatMessageContent], None]:
-        """
-        Méthode de streaming pour interagir avec l'agent.
-        Retourne le résultat complet en un seul chunk.
-        """
-        self.logger.info(f"Invocation en streaming de l'agent {self.name}.")
-        response = await self.invoke(messages, **kwargs)
-        yield response
-
-    async def get_response(
-        self,
-        messages: List[ChatMessageContent],
-        **kwargs: Dict[str, Any],
-    ) -> List[ChatMessageContent]:
-        """
-        Alias pour invoke, pour la compatibilité.
-        """
-        self.logger.info(f"Appel de get_response pour l'agent {self.name}.")
-        return await self.invoke(messages, **kwargs)
+        self.logger.info(f"Déclenchement de 'perform_complete_analysis' sur le texte: '{raw_text[:100]}...'")
+        analysis_result = await self.perform_complete_analysis(raw_text)
+        
+        return json.dumps(analysis_result, indent=2, ensure_ascii=False)
 
 # Log de chargement
 # logging.getLogger(__name__).debug("Module agents.core.informal.informal_agent chargé.") # Géré par BaseAgent
diff --git a/argumentation_analysis/agents/core/logic/propositional_logic_agent.py b/argumentation_analysis/agents/core/logic/propositional_logic_agent.py
index bfc79e18..6f20e127 100644
--- a/argumentation_analysis/agents/core/logic/propositional_logic_agent.py
+++ b/argumentation_analysis/agents/core/logic/propositional_logic_agent.py
@@ -396,40 +396,24 @@ class PropositionalLogicAgent(BaseLogicAgent):
         content = belief_set_data.get("content", "")
         return PropositionalBeliefSet(content)
 
-    async def get_response(
-        self,
-        chat_history: ChatHistory,
-        settings: Optional[Any] = None,
-    ) -> AsyncGenerator[list[ChatMessageContent], None]:
+    async def invoke_single(self, *args, **kwargs) -> str:
         """
-        Méthode abstraite de `Agent` pour obtenir une réponse.
-        Non implémentée car cet agent utilise des méthodes spécifiques.
-        """
-        logger.warning("La méthode 'get_response' n'est pas implémentée pour PropositionalLogicAgent et ne devrait pas être appelée directement.")
-        yield []
-        return
-
-    async def invoke(
-        self,
-        chat_history: ChatHistory,
-        settings: Optional[Any] = None,
-    ) -> list[ChatMessageContent]:
-        """
-        Méthode abstraite de `Agent` pour invoquer l'agent.
-        Non implémentée car cet agent utilise des méthodes spécifiques.
-        """
-        logger.warning("La méthode 'invoke' n'est pas implémentée pour PropositionalLogicAgent et ne devrait pas être appelée directement.")
-        return []
-
-    async def invoke_stream(
-        self,
-        chat_history: ChatHistory,
-        settings: Optional[Any] = None,
-    ) -> AsyncGenerator[list[ChatMessageContent], None]:
-        """
-        Méthode abstraite de `Agent` pour invoquer l'agent en streaming.
-        Non implémentée car cet agent utilise des méthodes spécifiques.
+        Implémentation de `invoke_single` pour l'agent de logique propositionnelle.
+
+        Cet agent est spécialisé et attend des appels à des fonctions spécifiques
+        (comme `text_to_belief_set` ou `execute_query`). Un appel générique
+        se contente de retourner ses capacités.
         """
-        logger.warning("La méthode 'invoke_stream' n'est pas implémentée pour PropositionalLogicAgent et ne devrait pas être appelée directement.")
-        yield []
-        return
\ No newline at end of file
+        import json
+        self.logger.info(f"PL Agent invoke_single called with: args={args}, kwargs={kwargs}")
+        self.logger.warning("L'invocation générique de PropositionalLogicAgent n'effectue aucune action, "
+                            "car il attend un appel à une fonction spécifique. Retour des capacités.")
+        
+        capabilities = self.get_agent_capabilities()
+        response = {
+            "status": "inaction",
+            "message": "PropositionalLogicAgent is ready. Invoke a specific capability.",
+            "capabilities": capabilities
+        }
+        
+        return json.dumps(response, indent=2)
\ No newline at end of file
diff --git a/argumentation_analysis/agents/core/pm/pm_agent.py b/argumentation_analysis/agents/core/pm/pm_agent.py
index 15fd476c..34a0c477 100644
--- a/argumentation_analysis/agents/core/pm/pm_agent.py
+++ b/argumentation_analysis/agents/core/pm/pm_agent.py
@@ -182,29 +182,32 @@ class ProjectManagerAgent(BaseAgent):
             capabilities = self.get_agent_capabilities()
             return f"Agent ProjectManager prêt. Capacités: {', '.join(capabilities.keys())}"
 
-    async def invoke(self, function_name: str, **kwargs) -> str:
+    async def invoke_single(self, *args, **kwargs) -> str:
         """
-        Méthode pour invoquer une fonction spécifique de l'agent.
-        
-        Args:
-            function_name: Le nom de la fonction à invoquer
-            **kwargs: Arguments pour la fonction
-            
-        Returns:
-            Le résultat de l'invocation
+        Implémentation de la logique de l'agent pour une seule réponse, appelée par la méthode `invoke` de la classe de base.
         """
-        self.logger.info(f"invoke appelée pour la fonction: {function_name}")
+        self.logger.info(f"PM Agent invoke_single called with: args={args}, kwargs={kwargs}")
+
+        # Le framework AgentGroupChat passe le `chat_history` comme premier argument positionnel.
+        # Nous l'extrayons pour récupérer le contexte et le texte.
+        # C'est une heuristique basée sur le fonctionnement actuel de SK.
+        raw_text = ""
+        analysis_state_snapshot = "{}" # Default empty state
         
-        if function_name == "define_tasks_and_delegate":
-            analysis_state = kwargs.get("analysis_state_snapshot", "")
-            raw_text = kwargs.get("raw_text", "")
-            return await self.define_tasks_and_delegate(analysis_state, raw_text)
-        elif function_name == "write_conclusion":
-            analysis_state = kwargs.get("analysis_state_snapshot", "")
-            raw_text = kwargs.get("raw_text", "")
-            return await self.write_conclusion(analysis_state, raw_text)
-        else:
-            raise ValueError(f"Fonction inconnue: {function_name}")
+        if args and isinstance(args[0], list) and len(args[0]) > 0:
+            # L'historique (chat avec les messages précédents) semble être dans args[0]
+            # Le message initial de l'utilisateur est souvent le premier.
+            for msg in args[0]:
+                if msg.role.value.lower() == 'user':
+                    raw_text = msg.content
+                    break # On prend le premier
+            self.logger.info(f"Texte brut extrait de l'historique: '{raw_text[:100]}...'")
+
+        # Pour le state_snapshot, c'est plus complexe.
+        # Sans une convention claire, on va appeler define_tasks avec l'état par défaut.
+        # C'est le rôle du PM de démarrer le processus.
+        self.logger.info("Déclenchement de 'define_tasks_and_delegate' depuis l'appel invoke_single générique.")
+        return await self.define_tasks_and_delegate(analysis_state_snapshot, raw_text)
 
     # D'autres méthodes métiers pourraient être ajoutées ici si nécessaire,
     # par exemple, une méthode qui encapsule la logique de décision principale du PM
diff --git a/argumentation_analysis/orchestration/analysis_runner.py b/argumentation_analysis/orchestration/analysis_runner.py
index 797619e2..fdd993f0 100644
--- a/argumentation_analysis/orchestration/analysis_runner.py
+++ b/argumentation_analysis/orchestration/analysis_runner.py
@@ -33,6 +33,7 @@ import semantic_kernel as sk
 from semantic_kernel.contents import ChatMessageContent
 from semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion, AzureChatCompletion
 from semantic_kernel.contents.utils.author_role import AuthorRole
+from semantic_kernel.contents.chat_history import ChatHistory
 
 # Correct imports
 from argumentation_analysis.core.shared_state import RhetoricalAnalysisState
@@ -163,8 +164,6 @@ async def _run_analysis_conversation(
         run_logger.info(f"Création du AgentGroupChat avec les agents: {[agent.name for agent in active_agents]}")
 
         # Créer le groupe de chat
-        group_chat = AgentGroupChat(agents=active_agents)
-
         # Message initial pour lancer la conversation
         initial_message_text = (
             "Vous êtes une équipe d'analystes experts en argumentation. "
@@ -174,13 +173,15 @@ async def _run_analysis_conversation(
             f"Voici le texte à analyser:\n\n---\n{local_state.raw_text}\n---"
         )
         
-        # Créer le message initial
-        initial_chat_message = ChatMessageContent(role=AuthorRole.USER, content=initial_message_text)
+        # Créer un historique de chat et y ajouter le message initial
+        chat_history_for_group = ChatHistory()
+        chat_history_for_group.add_user_message(initial_message_text)
+
+        # Créer le groupe de chat avec l'historique pré-rempli
+        group_chat = AgentGroupChat(agents=active_agents, chat_history=chat_history_for_group)
 
-        # Injecter le message directement dans l'historique du chat
-        group_chat.history.append(initial_chat_message)
-        
         run_logger.info("Démarrage de l'invocation du groupe de chat...")
+        # L'invocation se fait sans argument car le premier message est déjà dans l'historique.
         full_history = [message async for message in group_chat.invoke()]
         run_logger.info("Conversation terminée.")
         
